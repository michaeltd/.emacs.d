#+title: .emacs.d
#+author: michaeltd
#+date: <2019-12-24 Tue>
#+options: toc:nil num:nil
#+startup: overview
#+property: header-args :comments yes :results silent
#+html: <p align="center"><img src="assets/emacs-logo.png"/></p><p align="center"><a href="readme.org"><img src="assets/emacs.png"/></a></p>
yet another .emacs.d
* Init
** [[file:lisp][load path]]
Add [[file:lisp][lisp]] & [[file:site-lisp][site-lisp]] to load path
#+BEGIN_SRC emacs-lisp
;; Load path
;; Optimize: Force "lisp"" and "site-lisp" at the head to reduce the startup time.
(defun update-load-path (&rest _)
  "Update `load-path'."
  (push (expand-file-name "site-lisp" user-emacs-directory) load-path)
  (push (expand-file-name "lisp" user-emacs-directory) load-path))

(defun add-subdirs-to-load-path (&rest _)
  "Add subdirectories to `load-path'."
  (let ((default-directory
    (expand-file-name "site-lisp" user-emacs-directory)))
    (normal-top-level-add-subdirs-to-load-path)))

(advice-add #'package-initialize :after #'update-load-path)
(advice-add #'package-initialize :after #'add-subdirs-to-load-path)

(update-load-path)
#+END_SRC
** [[https://sanemacs.com/][sanemacs]]
 A minimal Emacs config that does just enough and nothing more.
 #+BEGIN_SRC emacs-lisp
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;; Sanemacs version 0.2.5 ;;;
 ;;; https://sanemacs.com   ;;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 ;;; Disable menu-bar, tool-bar, and scroll-bar.
 (if (fboundp 'menu-bar-mode)
     (menu-bar-mode -1))
 (if (fboundp 'tool-bar-mode)
     (tool-bar-mode -1))
 (if (fboundp 'scroll-bar-mode)
     (scroll-bar-mode -1))

 ;;; Fix this bug:
 ;;; https://www.reddit.com/r/emacs/comments/cueoug/the_failed_to_download_gnu_archive_is_a_pretty/
 (when (version< emacs-version "26.3")
   (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))

 ;;; Setup package.el
 (require 'package)
 (setq package-enable-at-startup nil)
 (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
 (unless package--initialized (package-initialize))

 ;;; Setup use-package
 (unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))
 (eval-when-compile
   (require 'use-package))
 (setq use-package-always-ensure t)

 ;;; Useful Defaults
 (setq-default cursor-type 'bar)           ; Line-style cursor similar to other text editors
 ;(setq inhibit-startup-screen t)           ; Disable startup screen
 ;(setq initial-scratch-message "")         ; Make *scratch* buffer blank
 (setq-default frame-title-format '("%b")) ; Make window title the buffer name
 (setq ring-bell-function 'ignore)         ; Disable bell sound
 (fset 'yes-or-no-p 'y-or-n-p)             ; y-or-n-p makes answering questions faster
 (show-paren-mode 1)                       ; Show closing parens by default
 (setq linum-format "%4d ")                ; Prettify line number format
 (add-hook 'prog-mode-hook                 ; Show line numbers in programming modes
           (if (fboundp 'display-line-numbers-mode)
	   #'display-line-numbers-mode
	   #'linum-mode))

 ;;(use-package undo-tree                    ; Enable undo-tree, sane undo/redo behavior
 ;;  :init (global-undo-tree-mode))

 ;;; Keybindings
 (global-set-key (kbd "C->") 'indent-rigidly-right-to-tab-stop) ; Indent selection by one tab length
 (global-set-key (kbd "C-<") 'indent-rigidly-left-to-tab-stop)  ; De-indent selection by one tab length

 ;;; Offload the custom-set-variables to a separate file
 ;;; This keeps your init.el neater and you have the option
 ;;; to gitignore your custom.el if you see fit.
 ;;(setq custom-file "~/.emacs.d/custom.el")
 (setq custom-file "/dev/null")
 (unless (file-exists-p custom-file)
   (write-region "" nil custom-file))
 ;;; Load custom file. Don't hide errors. Hide success message
 (load custom-file nil t)

 ;;; Avoid littering the user's filesystem with backups
 (setq
    backup-by-copying t      ; don't clobber symlinks
    backup-directory-alist
     '((".*" . "~/.emacs.d/saves/"))    ; don't litter my fs tree
    delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)       ; use versioned backups

 ;;; Lockfiles unfortunately cause more pain than benefit
 (setq create-lockfiles nil)

 ;;; Load wheatgrass as the default theme if one is not loaded already

 ;; (if (not custom-enabled-themes)
 ;;     (load-theme 'wheatgrass t))


 ;; (load "~/.emacs.d/sanemacs.el" nil t)

 ;;; Your configuration goes below this line.
 ;;; use-package is already loaded and ready to go!
 ;;; use-package docs: https://github.com/jwiegley/use-package
 #+END_SRC
* Looks
** [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]
 Required by [[emacs-dashboard]]
 #+BEGIN_SRC emacs-lisp
     ;; all the icons
     (require 'all-the-icons)
     (use-package all-the-icons :ensure t)
 #+END_SRC
** [[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard]]
 An extensible emacs startup screen showing you what’s most important.
 #+BEGIN_SRC emacs-lisp
   ;; dashboard
   (require 'dashboard)
   (dashboard-setup-startup-hook)
   ;; Or if you use use-package
   (use-package dashboard
     :ensure t
     :config
     (dashboard-setup-startup-hook))

   ;; emacs --daemon
   (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

   ;; Set the title

   ;; (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
   ;; (setq dashboard-banner-logo-title "M-x butterfly")
   (setq dashboard-banner-logo-title "Welcome to the church of Emacs")
   ;; Set the banner
   ;; (setq dashboard-startup-banner "~/.emacs.d/assets/gnu.png")
      (setq dashboard-startup-banner 4)
   ;; Value can be
   ;; 'official which displays the official emacs logo
   ;; 'logo which displays an alternative emacs logo
   ;; 1, 2 or 3 which displays one of the text banners
   ;; "path/to/your/image.png" which displays whatever image you would prefer

   ;; Content is not centered by default. To center, set
   (setq dashboard-center-content t)

   ;; To disable shortcut "jump" indicators for each section, set
   (setq dashboard-show-shortcuts nil)

   ;;To customize which widgets are displayed, you can use the following snippet
   (setq dashboard-items '((recents  . 4)))

   ;;To add icons to the widget headings and their items:

   (setq dashboard-set-heading-icons t)
   (setq dashboard-set-file-icons t)

   ;;To modify heading icons with another icon from all-the-icons octicons:

   (dashboard-modify-heading-icons '((recents . "file-text")
       (bookmarks . "book")))

   ;;To show navigator below the banner:

   (setq dashboard-set-navigator t)

   ;;To customize the buttons of the navigator like this:

   ;; (setq dashboard-navigator-buttons
   ;;       `(;; line1
   ;;         ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
   ;;          "Homepage"
   ;;          "Browse homepage"
   ;;          (lambda (&rest _) (browse-url "homepage")))
   ;;         ("★" "Star" "Show stars" (lambda (&rest _) (show-stars)) warning)
   ;;         ("?" "" "?/h" #'show-help nil "<" ">"))
   ;;          ;; line 2
   ;;         ((,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
   ;;           "Linkedin"
   ;;           ""
   ;;           (lambda (&rest _) (browse-url "homepage")))
   ;;          ("⚑" nil "Show flags" (lambda (&rest _) (message "flag")) error))))

   ;; Format: "(icon title help action face prefix suffix)"
   (setq dashboard-navigator-buttons
       `(;; line1
	   ((,(all-the-icons-faicon "cloud" :height 1.1 :v-adjust 0.0) "Web" "Browse webpage"
	       (lambda (&rest _) (browse-url "https://michaeltd.netlify.com/")))
	   (,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0) "Github" "Browse github"
	       (lambda (&rest _) (browse-url "https://github.com/michaeltd/")))
	   (,(all-the-icons-faicon "twitter" :height 1.1 :v-adjust 0.0) "Twitter" "Browse twitter"
	       (lambda (&rest _) (browse-url "https://twitter.com/tsouchlarakismd/")))
	   (,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0) "Linkedin" "Browse linkedin"
	       (lambda (&rest _) (browse-url "https://www.linkedin.com/in/michaeltd/"))))))

   ;;
   ;; To show info about the packages loaded and the init time:

   (setq dashboard-set-init-info t)

   ;; Also, the message can be customized like this:
   ;; (setq dashboard-init-info "This is an init message!")
   ;; A randomly selected footnote will be displayed. To disable it:
   ;; (setq dashboard-set-footer nil)
   ;; To customize it and customize its icon;
   ;; (setq dashboard-footer "Dashboard is pretty cool!")
   (setq dashboard-footer-icon (all-the-icons-octicon "dashboard"
						      :height 1.1
						      :v-adjust -0.05
						      :face 'font-lock-keyword-face))

   ;; Org mode’s agenda
   ;; To display today’s agenda items on the dashboard, add agenda to dashboard-items:
   ;;(add-to-list 'dashboard-items '(agenda) t)
   ;; To show agenda for the upcoming seven days set the variable show-week-agenda-p to t.
   ;; (setq show-week-agenda-p t)
   ;; Note that setting list-size for the agenda list is intentionally ignored; all agenda items for the current day will be displayed.
   ;; To customize which categories from the agenda items should be visible in the dashboard set the dashboard-org-agenda-categories to the list of categories you need.
   ;; (setq dashboard-org-agenda-categories '("Tasks" "Appointments"))
   ;; end dashboard
 #+END_SRC
** dired-mode
#+BEGIN_SRC emacs-lisp
    (setq dired-listing-switches "-aBhl  --group-directories-first")
#+END_SRC
** mode-line
*** [[https://www.emacswiki.org/emacs/ModeLineConfiguration][mode-line]]
 #+BEGIN_SRC emacs-lisp
 ;; Enable the display of the current time, see DisplayTime
 (display-time-mode 1)
 ;; Enable or disable the display of the current line number, see also LineNumbers
 (line-number-mode 1)
 ;; Enable or disable the display of the current column number
 (column-number-mode 1)
 ;; (for Emacs 22 and up) – Enable or disable the current buffer size, Emacs 22 and later, see size-indication-mode
 (size-indication-mode 1)
 ;; Enable or disable laptop battery information, see DisplayBatteryMode.
 (display-battery-mode 1)
 #+END_SRC

*** [[https://github.com/seagle0128/doom-modeline][doom-modeline]]
 #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/lisp/doom-modeline/")
     (require 'doom-modeline)
     (doom-modeline-mode 1)

     ;; How tall the mode-line should be. It's only respected in GUI.
     ;; If the actual char height is larger, it respects the actual height.
     (setq doom-modeline-height 25)

     ;; How wide the mode-line bar should be. It's only respected in GUI.
     (setq doom-modeline-bar-width 3)

     ;; How to detect the project root.
     ;; The default priority of detection is `ffip' > `projectile' > `project'.
     ;; nil means to use `default-directory'.
     ;; The project management packages have some issues on detecting project root.
     ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
     ;; to hanle sub-projects.
     ;; You can specify one if you encounter the issue.
     (setq doom-modeline-project-detection 'project)

     ;; Determines the style used by `doom-modeline-buffer-file-name'.
     ;;
     ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
     ;;   auto => emacs/lisp/comint.el (in a project) or comint.el
     ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
     ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
     ;;   truncate-with-project => emacs/l/comint.el
     ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
     ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
     ;;   truncate-all => ~/P/F/e/l/comint.el
     ;;   relative-from-project => emacs/lisp/comint.el
     ;;   relative-to-project => lisp/comint.el
     ;;   file-name => comint.el
     ;;   buffer-name => comint.el<2> (uniquify buffer name)
     ;;
     ;; If you are experiencing the laggy issue, especially while editing remote files
     ;; with tramp, please try `file-name' style.
     ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
     (setq doom-modeline-buffer-file-name-style 'auto)

     ;; Whether display icons in the mode-line. Respects `all-the-icons-color-icons'.
     ;; While using the server mode in GUI, should set the value explicitly.
     (setq doom-modeline-icon (display-graphic-p))

     ;; Whether display the icon for `major-mode'. Respects `doom-modeline-icon'.
     (setq doom-modeline-major-mode-icon t)

     ;; Whether display the colorful icon for `major-mode'.
     ;; Respects `doom-modeline-major-mode-icon'.
     (setq doom-modeline-major-mode-color-icon t)

     ;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
     (setq doom-modeline-buffer-state-icon t)

     ;; Whether display the modification icon for the buffer.
     ;; Respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
     (setq doom-modeline-buffer-modification-icon t)

     ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
     (setq doom-modeline-unicode-fallback nil)

     ;; Whether display the minor modes in the mode-line.
     (setq doom-modeline-minor-modes nil)

     ;; If non-nil, a word count will be added to the selection-info modeline segment.
     (setq doom-modeline-enable-word-count nil)

     ;; Major modes in which to display word count continuously.
     ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
     ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
     ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
     (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

     ;; Whether display the buffer encoding.
     (setq doom-modeline-buffer-encoding t)

     ;; Whether display the indentation information.
     (setq doom-modeline-indent-info nil)

     ;; If non-nil, only display one number for checker information if applicable.
     (setq doom-modeline-checker-simple-format t)

     ;; The maximum number displayed for notifications.
     (setq doom-modeline-number-limit 99)

     ;; The maximum displayed length of the branch name of version control.
     (setq doom-modeline-vcs-max-length 12)

     ;; Whether display the perspective name. Non-nil to display in the mode-line.
     (setq doom-modeline-persp-name t)

     ;; If non nil the default perspective name is displayed in the mode-line.
     (setq doom-modeline-display-default-persp-name nil)

     ;; Whether display the `lsp' state. Non-nil to display in the mode-line.
     (setq doom-modeline-lsp t)

     ;; Whether display the GitHub notifications. It requires `ghub' package.
     (setq doom-modeline-github nil)

     ;; The interval of checking GitHub.
     (setq doom-modeline-github-interval (* 30 60))

     ;; Whether display the modal state icon.
     ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
     (setq doom-modeline-modal-icon t)

     ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
     (setq doom-modeline-mu4e nil)

     ;; Whether display the gnus notifications.
     (setq doom-modeline-gnus t)

     ;; Wheter gnus should automatically be updated and how often (set to nil to disable)
     (setq doom-modeline-gnus-timer 2)

     ;; Whether display the IRC notifications. It requires `circe' or `erc' package.
     (setq doom-modeline-irc t)

     ;; Function to stylize the irc buffer names.
     (setq doom-modeline-irc-stylize 'identity)

     ;; Whether display the environment version.
     (setq doom-modeline-env-version t)
     ;; Or for individual languages
     (setq doom-modeline-env-enable-python t)
     (setq doom-modeline-env-enable-ruby t)
     (setq doom-modeline-env-enable-perl t)
     (setq doom-modeline-env-enable-go t)
     (setq doom-modeline-env-enable-elixir t)
     (setq doom-modeline-env-enable-rust t)

     ;; Change the executables to use for the language version string
     (setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
     (setq doom-modeline-env-ruby-executable "ruby")
     (setq doom-modeline-env-perl-executable "perl")
     (setq doom-modeline-env-go-executable "go")
     (setq doom-modeline-env-elixir-executable "iex")
     (setq doom-modeline-env-rust-executable "rustc")

     ;; What to dispaly as the version while a new one is being loaded
     (setq doom-modeline-env-load-string "...")

     ;; Hooks that run before/after the modeline version string is updated
     (setq doom-modeline-before-update-env-hook nil)
     (setq doom-modeline-after-update-env-hook nil)
 #+END_SRC
** [[https://github.com/hlissner/emacs-doom-themes][doom-themes]] setup
 #+BEGIN_SRC emacs-lisp
     (require 'doom-themes)
     ;; Global settings (defaults)
     (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
         doom-themes-enable-italic t) ; if nil, italics is universally disabled
     ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each
     ;; theme may have their own settings.
     ;; (load-theme 'doom-vibrant t)
     ;; Enable flashing mode-line on errors
     (doom-themes-visual-bell-config)
     ;; Enable custom neotree theme
     (doom-themes-neotree-config)  ; all-the-icons fonts must be installed!
     ;; or for treemacs users
     (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
     (doom-themes-treemacs-config)
     ;; Corrects (and improves) org-mode's native fontification.
     (doom-themes-org-config)
 #+END_SRC
** [[themes][themes]]
#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
      ;; jazz tomorrow-night-paradise dracula doom-lazersynth doom-dracula doom-one doom-outrun-electric xresources
      (load-theme 'doom-outrun-electric t)
      ;; (load-theme 'xresources t)
      ;; (add-hook 'after-init-hook (lambda () (load-theme 'xresources)))
      ;;(add-hook 'emacs-startup-hook(lambda () (load-theme 'xresources)))
#+END_SRC
** [[https://www.emacswiki.org/emacs/SetFonts][default font]]
#+BEGIN_SRC emacs-lisp
;; Globally Change the Default Font
;; To change the default font for new (non special-display) frames, put either of these in your init file:
;;     (add-to-list 'default-frame-alist '(font .  ))
;;     (set-face-attribute 'default t :font "Ubuntu Mono Regular-10" )
;; To change the default font for the current frame, as well as future frames, put either of these in your init file:
    (set-face-attribute 'default nil :font "SourceCodePro" )
;;     "DejaVuSansMono" "DroidSansMonoDottedforPowerline" "FantasqueSansMono"
;;     "FiraMono" "LiberationMonoforPowerline" "Monospace" "SourceCodePro"
;;     "SpaceMono" "ShareTechMono" Hack UbuntuMono IBM3270
;;     (set-frame-font FONT nil t)
;; where FONT is a string naming the font you want, for example, "Droid Sans Mono-10".
;; This should work on all platforms. As of Emacs 23, all of your system fonts including TrueType are available to Emacs.
;; If you are using a development snapshot for what will become Emacs 24.4 then see Emacs bug #16529.
;; (There needs to be an explanation for how to set fonts for particular modes or buffers here. Including a set-face-attribute hook as described above for a particular mode does not work; once you enter that mode the new font is set, but it is applied globally to all other open buffers!)
;; Global Fonts, .Xresources, and Emacs Daemon
;; I found that the only way to set fonts so that they remain consistent across emacs -nw, emacs23(-gtk), emacsclient -t, emacsclient -c, was to declare them in .Xresources and .emacs. But the declarations can’t conflict with each other. Otherwise, emacs --daemon complains. It doesn’t like (set-face-attribute ‘default nil :font FONT) and the like. For instance, to use Terminus, 9 pixel size across the board, I needed to insert
;; Emacs.font: Terminus-9
;; (set-default-font “Terminus-9”)
;; in my ~/.Xresources and ~/.emacs, respectively.
#+END_SRC

* Languages
** [[https://orgmode.org/worg/org-contrib/babel/][org-babel]]
#+BEGIN_SRC emacs-lisp
  ;; Org-Babel tangle
  (require 'ob-tangle)
  ;; Setup Babel languages. Can now do Literate Programming
  (org-babel-do-load-languages 'org-babel-load-languages
    '((python . t)
      (shell . t)
      (emacs-lisp . t)
      (ledger . t)
      (ditaa . t)
      (js . t)
      (C . t)))
#+END_SRC
** [[https://github.com/rust-lang/rust-mode][rust-mode]]
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/rust-mode/")
  (autoload 'rust-mode "rust-mode" nil t)
  (require 'rust-mode)
#+END_SRC
** [[https://github.com/immerrr/lua-mode][lua-mode]]
#+BEGIN_SRC emacs-lisp
  ;;;; This snippet enables lua-mode
  ;; This line is not necessary, if lua-mode.el is already on your load-path
  (add-to-list 'load-path "~/.emacs.d/lisp/lua-mode")
  (autoload 'lua-mode "lua-mode" "Lua editing mode." t)
  (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
  (add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
#+END_SRC
** emacs [[https://github.com/hvesalai/emacs-scala-mode][scala-mode]] & [[https://github.com/hvesalai/emacs-sbt-mode][sbt-mode]]
#+BEGIN_SRC emacs-lisp
  (use-package scala-mode
    :interpreter
    ("scala" . scala-mode))

  (use-package sbt-mode
    :commands sbt-start sbt-command
    :config
    ;; WORKAROUND: allows using SPACE when in the minibuffer
    (substitute-key-definition
    'minibuffer-complete-word
    'self-insert-command
    minibuffer-local-completion-map))
#+END_SRC
* Utilities
** [[https://www.emacswiki.org/emacs/InteractivelyDoThings][ido-mode]]
#+BEGIN_SRC emacs-lisp
;; (require 'ido)
;;     (setq ido-enable-flex-matching t)
;;     (setq ido-everywhere t)
;;     (ido-mode t)
#+END_SRC
** [[https://github.com/ch11ng/exwm/][exwm]]
#+BEGIN_SRC emacs-lisp
;; exwm :)
;; (require 'exwm)
;; (require 'exwm-config)
;; (exwm-config-default)
#+END_SRC
** multi-term
This package is for creating and managing multiple terminal buffers in Emacs.
#+BEGIN_SRC emacs-lisp
(when (require 'multi-term nil t)
  (progn
    ;; custom
    ;; (customize-set-variable 'multi-term-program "/usr/local/bin/fish")
    (customize-set-variable 'multi-term-program "bash")

    ;; focus terminal window after you open dedicated window
    (customize-set-variable 'multi-term-dedicated-select-after-open-p t)

    ;; the buffer name of term buffer.
    (customize-set-variable 'multi-term-buffer-name "multi-term")

    ;; binds (C-x) prefix
    (define-key ctl-x-map (kbd "<C-return>") 'multi-term)
    (define-key ctl-x-map (kbd "x") 'multi-term-dedicated-toggle)))
#+END_SRC
* [[https://www.reddit.com/r/emacs/comments/erzwaf/help_me_break_the_emacs_loop/][help me break the emacs loop]]
  - Whichkey
  - Ivy
  - Swiper
  - Hydra
  - Dired-peep
  - mini-modeline
  - ibuffer

