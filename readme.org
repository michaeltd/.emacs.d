#+title: .emacs.d
#+author: michaeltd
#+date: <2019-12-24 Tue>
#+options: toc:nil num:nil
#+startup: overview
#+property: header-args :comments yes :results silent
#+html: <p align="center"><img src="assets/emacs-logo.png"/></p><p align="center"><a href="readme.org"><img src="assets/screenshot.png"/></a></p>
yet another .emacs.d
* Init
** [[file:lisp][load path]]
Add [[file:lisp][lisp]] & [[file:site-lisp][site-lisp]] to load path
#+BEGIN_SRC emacs-lisp
;; Load path
;; Optimize: Force "lisp"" and "site-lisp" at the head to reduce the startup time.
(defun update-load-path (&rest _)
  "Update `load-path'."
  (push (expand-file-name "site-lisp" user-emacs-directory) load-path)
  (push (expand-file-name "lisp" user-emacs-directory) load-path))

(defun add-subdirs-to-load-path (&rest _)
  "Add subdirectories to `load-path'."
  (let ((default-directory
    (expand-file-name "site-lisp" user-emacs-directory)))
    (normal-top-level-add-subdirs-to-load-path)))

(advice-add #'package-initialize :after #'update-load-path)
(advice-add #'package-initialize :after #'add-subdirs-to-load-path)

(update-load-path)
#+END_SRC
** [[https://sanemacs.com/][sanemacs]]
 A minimal Emacs config that does just enough and nothing more.
 #+BEGIN_SRC emacs-lisp
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;; Sanemacs version 0.2.5 ;;;
 ;;; https://sanemacs.com   ;;;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 ;;; Disable menu-bar, tool-bar, and scroll-bar.
 (if (fboundp 'menu-bar-mode)
     (menu-bar-mode -1))
 (if (fboundp 'tool-bar-mode)
     (tool-bar-mode -1))
 (if (fboundp 'scroll-bar-mode)
     (scroll-bar-mode -1))

 ;;; Fix this bug:
 ;;; https://www.reddit.com/r/emacs/comments/cueoug/the_failed_to_download_gnu_archive_is_a_pretty/
 (when (version< emacs-version "26.3")
   (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))

 ;;; Setup package.el
 (require 'package)
 (setq package-enable-at-startup nil)
 (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
 (unless package--initialized (package-initialize))

 ;;; Setup use-package
 (unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))
 (eval-when-compile
   (require 'use-package))
 (setq use-package-always-ensure t)

 ;;; Useful Defaults
 (setq-default cursor-type 'bar)           ; Line-style cursor similar to other text editors
 ;(setq inhibit-startup-screen t)           ; Disable startup screen
 ;(setq initial-scratch-message "")         ; Make *scratch* buffer blank
 (setq-default frame-title-format '("%b")) ; Make window title the buffer name
 (setq ring-bell-function 'ignore)         ; Disable bell sound
 (fset 'yes-or-no-p 'y-or-n-p)             ; y-or-n-p makes answering questions faster
 (show-paren-mode 1)                       ; Show closing parens by default
 (setq linum-format "%4d ")                ; Prettify line number format
 (add-hook 'prog-mode-hook                 ; Show line numbers in programming modes
           (if (fboundp 'display-line-numbers-mode)
	   #'display-line-numbers-mode
	   #'linum-mode))

 ;;(use-package undo-tree                    ; Enable undo-tree, sane undo/redo behavior
 ;;  :init (global-undo-tree-mode))

 ;;; Keybindings
 (global-set-key (kbd "C->") 'indent-rigidly-right-to-tab-stop) ; Indent selection by one tab length
 (global-set-key (kbd "C-<") 'indent-rigidly-left-to-tab-stop)  ; De-indent selection by one tab length

 ;;; Offload the custom-set-variables to a separate file
 ;;; This keeps your init.el neater and you have the option
 ;;; to gitignore your custom.el if you see fit.
 ;; (setq custom-file "~/.emacs.d/custom.el")
 (setq custom-file "/dev/null")
 (unless (file-exists-p custom-file)
   (write-region "" nil custom-file))
 ;;; Load custom file. Don't hide errors. Hide success message
 (load custom-file nil t)

 ;;; Avoid littering the user's filesystem with backups
 (setq
    backup-by-copying t      ; don't clobber symlinks
    backup-directory-alist
     '((".*" . "~/.emacs.d/saves/"))    ; don't litter my fs tree
    delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)       ; use versioned backups

 ;;; Lockfiles unfortunately cause more pain than benefit
 (setq create-lockfiles nil)

 ;;; Load wheatgrass as the default theme if one is not loaded already

 ;; (if (not custom-enabled-themes)
 ;;     (load-theme 'wheatgrass t))


 ;; (load "~/.emacs.d/sanemacs.el" nil t)

 ;;; Your configuration goes below this line.
 ;;; use-package is already loaded and ready to go!
 ;;; use-package docs: https://github.com/jwiegley/use-package
 #+END_SRC
* Looks
** dired-mode
#+BEGIN_SRC emacs-lisp
    (setq dired-listing-switches "-aBhl  --group-directories-first")
#+END_SRC
** [[https://www.emacswiki.org/emacs/ModeLineConfiguration][mode-line]]
 #+BEGIN_SRC emacs-lisp
 ;; Enable the display of the current time, see DisplayTime
 (display-time-mode 1)
 ;; Enable or disable the display of the current line number, see also LineNumbers
 (line-number-mode 1)
 ;; Enable or disable the display of the current column number
 (column-number-mode 1)
 ;; (for Emacs 22 and up) â€“ Enable or disable the current buffer size, Emacs 22 and later, see size-indication-mode
 (size-indication-mode 1)
 ;; Enable or disable laptop battery information, see DisplayBatteryMode.
 (display-battery-mode 1)
 #+END_SRC
** [[themes][themes]]
#+BEGIN_SRC emacs-lisp
    (setq custom-safe-themes t)
    (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
    ;; (load-theme 'xresources t)
    (add-hook 'after-init-hook (lambda () (load-theme 'xresources)))
    ;; (add-hook 'emacs-startup-hook(lambda () (load-theme 'xresources)))
#+END_SRC
** [[https://www.emacswiki.org/emacs/SetFonts][default font]]
#+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil :font "SourceCodePro" )
#+END_SRC
* Languages
** [[https://orgmode.org/worg/org-contrib/babel/][org-babel]]
#+BEGIN_SRC emacs-lisp
  ;; Org-Babel tangle
  (require 'ob-tangle)
  ;; Setup Babel languages. Can now do Literate Programming
  (org-babel-do-load-languages 'org-babel-load-languages
    '((python . t)
      (shell . t)
      (emacs-lisp . t)
      (ledger . t)
      (ditaa . t)
      (js . t)
      (C . t)))
#+END_SRC
** [[https://github.com/rust-lang/rust-mode][rust-mode]]
#+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/lisp/rust-mode/")
    (autoload 'rust-mode "rust-mode" nil t)
    (require 'rust-mode)
#+END_SRC
** [[https://github.com/immerrr/lua-mode][lua-mode]]
#+BEGIN_SRC emacs-lisp
  ;; This snippet enables lua-mode
  ;; This line is not necessary, if lua-mode.el is already on your load-path
  (add-to-list 'load-path "~/.emacs.d/lisp/lua-mode")
  (autoload 'lua-mode "lua-mode" "Lua editing mode." t)
  (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
  (add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
#+END_SRC
** emacs [[https://github.com/hvesalai/emacs-scala-mode][scala-mode]] & [[https://github.com/hvesalai/emacs-sbt-mode][sbt-mode]]
#+BEGIN_SRC emacs-lisp
    (use-package scala-mode
        :interpreter
	("scala" . scala-mode))

    (use-package sbt-mode
        :commands sbt-start sbt-command
	:config
	;; WORKAROUND: allows using SPACE when in the minibuffer
	(substitute-key-definition
	    'minibuffer-complete-word
	    'self-insert-command
	    minibuffer-local-completion-map))
#+END_SRC
* Utilities
** terms
*** multi-term
 This package is for creating and managing multiple terminal buffers in Emacs.
 #+BEGIN_SRC emacs-lisp
 (when (require 'multi-term nil t)
   (progn
     ;; custom
     ;; (customize-set-variable 'multi-term-program "/usr/local/bin/fish")
     (customize-set-variable 'multi-term-program "bash")
     ;; focus terminal window after you open dedicated window
     (customize-set-variable 'multi-term-dedicated-select-after-open-p t)
     ;; the buffer name of term buffer.
     (customize-set-variable 'multi-term-buffer-name "multi-term")
     ;; binds (C-x) prefix
     (define-key ctl-x-map (kbd "<C-return>") 'multi-term)
     (define-key ctl-x-map (kbd "x") 'multi-term-dedicated-toggle)))
 #+END_SRC
*** [[https://github.com/akermu/emacs-libvterm][vterm]]
#+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/lisp/emacs-libvterm")
    (require 'vterm)
    ;; Or, with use-package:
    ;; (use-package vterm :load-path "~/.emacs.d/lisp/emacs-libvterm/")
    ;; Or, install with melpa
    ;; (use-package vterm :ensure t)
#+END_SRC
* [[https://www.reddit.com/r/emacs/comments/erzwaf/help_me_break_the_emacs_loop/][help me break the emacs loop]]
  - Whichkey
  - Ivy
  - Swiper
  - Hydra
  - Dired-peep
  - mini-modeline
  - ibuffer

