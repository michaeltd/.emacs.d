#+title: .emacs.d
#+author: michaeltd
#+date: <2019-12-24 Tue>
#+options: toc:nil num:nil
#+startup: overview
#+property: header-args :comments yes
#+html: <p align="center"><img src="assets/emacs-logo.png"/></p><p align="center"><a href="readme.org"><img src="assets/screenshot.png"/></a></p>
yet another .emacs.d
* Use Case
  1) Load Times

     It must deliver lightning fast load times to be suitable for ancient hardware such as mine >:'[
     #+BEGIN_SRC shell
     time emacs --eval='(kill-emacs)' # should yield -lt 1s
     #+END_SRC
     Resulting load times should render ~emacs --daemon~ a functional choice rather than a practical one.

     So buy me some coffee in [[https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=3THXBFPG9H3YY&source=michaeltd/.emacs.d][\euro]] or ₿ (bitcoin:3KCPkfTWqanYfgNvoUKP1S4bFXTDpaReUs) so I can up my game.
  2) Out of the clone

     It needs to work out of the box for a more "batteries included" like experience. reads: no source packages.
  3) Eye Candy

     It needs to be moderately beautifull in a resource efficient manner. (reads: No doom-themes, doom-modeline, doom-\star, spacemacs-\star)
  4) UXP

     It needs to deliver a next to vanilla user experience.
* Files
  1. [[file:init.el][init.el]]

     Standard Emacs Init file
  2. [[file:readme.org][readme.org]]

     This file
  3. [[file:themes][themes]]

     Various tried and true themes, namely:
     1) [[file:themes/dracula-theme.el][dracula]]
     2) [[file:themes/gotham-theme.el][gotham]]
     3) [[file:themes/jazz-theme.el][jazz]]
     4) [[file:themes/ujelly-theme.el][ujelly]]
     5) [[file:themes/xresources-theme.el][xresources]]
* Load Sequence
** Init
*** some variables
    #+BEGIN_SRC emacs-lisp
    (setq user-full-name "michaeltd"
        user-mail-address "tsouchlarakis@gmail.com"
	user-pgp-key "0x01063480")
    #+END_SRC
*** update-load-path
    Add [[file:lisp][lisp]] & [[file:site-lisp][site-lisp]] to load path
    #+BEGIN_SRC emacs-lisp
    ;; Load path
    ;; Optimize: Force "lisp"" and "site-lisp" at the head to reduce the startup time.
    (defun update-load-path (&rest _)
        "Update `load-path'."
	(push (expand-file-name "site-lisp" user-emacs-directory) load-path)
	(push (expand-file-name "lisp" user-emacs-directory) load-path))

    (defun add-subdirs-to-load-path (&rest _)
        "Add subdirectories to `load-path'."
	(let ((default-directory
            (expand-file-name "site-lisp" user-emacs-directory)))
	    (normal-top-level-add-subdirs-to-load-path)))

    (advice-add #'package-initialize :after #'update-load-path)
    (advice-add #'package-initialize :after #'add-subdirs-to-load-path)

    (update-load-path)
    #+END_SRC
*** [[https://sanemacs.com/][sanemacs]]
    A minimal Emacs config that does just enough and nothing more.
    #+BEGIN_SRC emacs-lisp
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;; Sanemacs version 0.2.5 ;;;
    ;;; https://sanemacs.com   ;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ;;; Disable menu-bar, tool-bar, and scroll-bar.
    (if (fboundp 'menu-bar-mode)
        (menu-bar-mode -1))
    (if (fboundp 'tool-bar-mode)
        (tool-bar-mode -1))
    (if (fboundp 'scroll-bar-mode)
        (scroll-bar-mode -1))

    ;;; Fix this bug:
    ;;; https://www.reddit.com/r/emacs/comments/cueoug/the_failed_to_download_gnu_archive_is_a_pretty/
    (when (version< emacs-version "26.3")
        (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))

    ;;; Setup package.el
    (require 'package)
    (setq package-enable-at-startup nil)
    ;;(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (unless (assoc-default "melpa" package-archives)
        (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
    (unless (assoc-default "org" package-archives)
        (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t))

    (unless package--initialized (package-initialize))

    ;;; Setup use-package
    (unless (package-installed-p 'use-package)
        (package-refresh-contents)
	(package-install 'use-package))
	(eval-when-compile
	(require 'use-package))
	(setq use-package-always-ensure t)

    ;;; Useful Defaults
    (setq-default cursor-type 'bar)           ; Line-style cursor similar to other text editors
    ;(setq inhibit-startup-screen t)           ; Disable startup screen
    ;(setq initial-scratch-message "")         ; Make *scratch* buffer blank
    (setq-default frame-title-format '("%b")) ; Make window title the buffer name
    (setq ring-bell-function 'ignore)         ; Disable bell sound
    (fset 'yes-or-no-p 'y-or-n-p)             ; y-or-n-p makes answering questions faster
    (show-paren-mode 1)                       ; Show closing parens by default
    (setq linum-format "%4d ")                ; Prettify line number format
    (add-hook 'prog-mode-hook                 ; Show line numbers in programming modes
        (if (fboundp 'display-line-numbers-mode)
	    #'display-line-numbers-mode
	    #'linum-mode))

    ;;(use-package undo-tree                    ; Enable undo-tree, sane undo/redo behavior
    ;;  :init (global-undo-tree-mode))

    ;;; Keybindings
    (global-set-key (kbd "C->") 'indent-rigidly-right-to-tab-stop) ; Indent selection by one tab length
    (global-set-key (kbd "C-<") 'indent-rigidly-left-to-tab-stop)  ; De-indent selection by one tab length

    ;;; Offload the custom-set-variables to a separate file
    ;;; This keeps your init.el neater and you have the option
    ;;; to gitignore your custom.el if you see fit.
    ;; (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (setq custom-file "/dev/null")
    (unless (file-exists-p custom-file)
        (write-region "" nil custom-file))
    ;;; Load custom file. Don't hide errors. Hide success message
    (load custom-file nil t)

    ;;; Avoid littering the user's filesystem with backups
    (setq
        backup-by-copying t      ; don't clobber symlinks
	backup-directory-alist 
	    ;; '((".*" . (concat user-emacs-directory "saves/")))    ; don't litter my fs tree
	    ;; '((".*" . (expand-file-name "saves/" user-emacs-directory))) 
            '((".*" . "~/.emacs.d/saves/"))    ; don't litter my fs tree
	delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)       ; use versioned backups

	;;; Lockfiles unfortunately cause more pain than benefit
	(setq create-lockfiles nil)

	;;; Load wheatgrass as the default theme if one is not loaded already

	;; (if (not custom-enabled-themes)
	;;     (load-theme 'wheatgrass t))
    #+END_SRC
** Looks
*** dired-mode
    #+BEGIN_SRC emacs-lisp
    (setq dired-listing-switches "-aBhl  --group-directories-first")
    #+END_SRC
*** [[https://www.emacswiki.org/emacs/ModeLineConfiguration][mode-line]]
    #+BEGIN_SRC emacs-lisp
    ;; Enable the display of the current time, see DisplayTime
    (display-time-mode 1)
    ;; Enable or disable the display of the current line number, see also LineNumbers
    (line-number-mode 1)
    ;; Enable or disable the display of the current column number
    (column-number-mode 1)
    ;; (for Emacs 22 and up) – Enable or disable the current buffer size, Emacs 22 and later, see size-indication-mode
    (size-indication-mode 1)
    ;; Enable or disable laptop battery information, see DisplayBatteryMode.
    (display-battery-mode 1)
    #+END_SRC
*** all-the-icons
    #+BEGIN_SRC emacs-lisp
    ;; (require 'all-the-icons)
    ;; or
    (use-package all-the-icons)
    #+END_SRC
*** page-break-lines
    #+BEGIN_SRC emacs-lisp
    (require 'page-break-lines)
    #+END_SRC
*** emacs-dashboard
    #+BEGIN_SRC emacs-lisp
    (require 'dashboard)
    (dashboard-setup-startup-hook)
    ;; Or if you use use-package
    (use-package dashboard
        :ensure t
	:config
	(dashboard-setup-startup-hook))

    ;; By default, this will show three lists, recent files and bookmarks and org-agenda items. One more widget is implemented by Dashboard but it’s made optional because of it’s dependency on a third party application, which is `projects` which shows you the list of known projectile projects.
    ;; Emacs Daemon
    ;; In addition to the above, configure initial-buffer-choice to show Dashboard in frames created with emacsclient -c as follows:
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

    ;; Configuration
    ;; To update the banner or banner title
    ;; Set the title
    (setq dashboard-banner-logo-title "Welcome to the Church of Emacs")
    ;; Set the banner
    (setq dashboard-startup-banner 4)
    ;; Value can be
    ;; 'official which displays the official emacs logo
    ;; 'logo which displays an alternative emacs logo
    ;; 1, 2 or 3 which displays one of the text banners
    ;; "path/to/your/image.png" which displays whatever image you would prefer

    ;; Content is not centered by default. To center, set
    (setq dashboard-center-content t)

    ;; To disable shortcut "jump" indicators for each section, set
    ;(setq dashboard-show-shortcuts nil)

    ;; To customize which widgets are displayed, you can use the following snippet
    (setq dashboard-items '((recents  . 4)))
    ;;    (bookmarks . 5)
    ;;    (projects . 5)
    ;;    (agenda . 5)
    ;;    (registers . 5)))

    ;; This will add the recent files, bookmarks, projects, org-agenda and registers widgets to your dashboard each displaying 5 items.
    ;; To add your own custom widget is pretty easy, define your widget’s callback function and add it to `dashboard-items` as such:
    ;;(defun dashboard-insert-custom (list-size)
    ;;(insert "Custom text"))
    ;;(add-to-list 'dashboard-item-generators  '(custom . dashboard-insert-custom))
    ;;(add-to-list 'dashboard-items '(custom) t)

    ;; To add icons to the widget headings and their items:
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)

    ;; To modify heading icons with another icon from all-the-icons octicons:
    ;;(dashboard-modify-heading-icons '((recents . "file-text")
    ;;(bookmarks . "book")))

    ;; To show navigator below the banner:
    (setq dashboard-set-navigator t)

    ;; To customize the buttons of the navigator like this:
    ;; Format: "(icon title help action face prefix suffix)"
    ;;(setq dashboard-navigator-buttons
    ;;    `(;; line1
    ;;        ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
    ;;            "Homepage"
    ;;            "Browse homepage"
    ;;            (lambda (&rest _) (browse-url "homepage")))
    ;; ("★" "Stars" "Show stars" (lambda (&rest _) (show-stars)) warning)
    ;; ("?" "" "?/h" #'show-help nil "<" ">"))
    ;; line 2
    ;; ((,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
    ;; "Linkedin"
    ;; ""
    ;; (lambda (&rest _) (browse-url "homepage")))
    ;; ("⚑" nil "Show flags" (lambda (&rest _) (message "flag")) error))))

    (setq dashboard-navigator-buttons
        `(;; line1
            ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0) 
	        "GitHub" 
		"Browse GitHub"
		(lambda (&rest _) (browse-url "https://github.com/michaeltd")))
	    (,(all-the-icons-faicon "cloud" :height 1.1 :v-adjust 0.0)
	        "Homepage" 
		"Browse Homepage"
		(lambda (&rest _) (browse-url "https://michaeltd.netlify.com/")))
            (,(all-the-icons-faicon "twitter" :height 1.1 :v-adjust 0.0) 
	        "Twitter" 
		"Browse Twitter"
		(lambda (&rest _) (browse-url "https://www.twitter.com/tsouchlarakismd")))
	    
	    (,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0) 
	        "LinkedIn" 
		"Browse LinkedIn"
		(lambda (&rest _) (browse-url "https://www.linkedin.com/in/michaeltd"))))))

    ;;("★" "Star" "Show stars" (lambda (&rest _) (show-stars)) warning)
    ;;("?" "" "?/h" #'show-help nil "<" ">"))
    ;; line 2
    ;((,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
    ;"Linkedin"
    ;""
    ;(lambda (&rest _) (browse-url "homepage")))
    ;("⚑" nil "Show flags" (lambda (&rest _) (message "flag")) error))))

    ;; To show info about the packages loaded and the init time:
    (setq dashboard-set-init-info t)
	  
    ;; Also, the message can be customized like this:
    ;;(setq dashboard-init-info "This is an init message!")
	  
    ;; A randomly selected footnote will be displayed. To disable it:
    ;;(setq dashboard-set-footer nil)
	  
    ;; To customize it and customize its icon;
    ;;(setq dashboard-footer-messages '("Dashboard is pretty cool!"))
    ;;(setq dashboard-footer-icon (all-the-icons-octicon "dashboard"
    ;;:height 1.1
    ;;:v-adjust -0.05
    ;;:face 'font-lock-keyword-face))

    ;; Org mode’s agenda
    ;; To display today’s agenda items on the dashboard, add agenda to dashboard-items:
    ;;(add-to-list 'dashboard-items '(agenda) t)

    ;; To show agenda for the upcoming seven days set the variable show-week-agenda-p to t.
    ;;(setq show-week-agenda-p t)

    ;; Note that setting list-size for the agenda list is intentionally ignored; all agenda items for the current day will be displayed.
    ;; To customize which categories from the agenda items should be visible in the dashboard set the dashboard-org-agenda-categories to the list of categories you need.
    ;;(setq dashboard-org-agenda-categories '("Tasks" "Appointments"))
    #+END_SRC
*** purrrdy symbols
    #+BEGIN_SRC emacs-lisp
    (global-prettify-symbols-mode t)
    #+END_SRC
*** scrolling behavior
    #+BEGIN_SRC emacs-lisp
    (setq scroll-conservatively 100)
    #+END_SRC
*** global-hl-line-mode
    #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode)
    #+END_SRC
*** [[https://www.emacswiki.org/emacs/SetFonts][default font]]
    #+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil :font "Source Code Pro" )
    #+END_SRC
*** [[themes][themes]]
    #+BEGIN_SRC emacs-lisp
    (setq custom-safe-themes t)
    (add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes/"))
    (load-theme 'dracula t)
    ;; (add-hook 'after-init-hook (lambda () (load-theme 'xresources)))
    ;; (add-hook 'emacs-startup-hook(lambda () (load-theme 'xresources)))
    #+END_SRC
** Languages
*** [[https://orgmode.org/worg/org-contrib/babel/][org-babel]]
    #+BEGIN_SRC emacs-lisp
    ;; Org-Babel tangle
    (require 'ob-tangle)
    ;; Setup Babel languages. Can now do Literate Programming
    (org-babel-do-load-languages 'org-babel-load-languages
        '((python . t)
            (shell . t)
	    (emacs-lisp . t)
	    (ledger . t)
	    (ditaa . t)
	    (js . t)
	    (C . t)))
    #+END_SRC
*** [[https://github.com/rust-lang/rust-mode][rust-mode]]
    #+BEGIN_SRC emacs-lisp
    (use-package rust-mode :ensure t)
    #+END_SRC
*** [[https://github.com/immerrr/lua-mode][lua-mode]]
    #+BEGIN_SRC emacs-lisp
    (use-package lua-mode :ensure t)
    (autoload 'lua-mode "lua-mode" "Lua editing mode." t)
    (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
    (add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
    #+END_SRC
*** emacs [[https://github.com/hvesalai/emacs-scala-mode][scala-mode]] & [[https://github.com/hvesalai/emacs-sbt-mode][sbt-mode]]
    #+BEGIN_SRC emacs-lisp
    (use-package scala-mode
        :ensure t
        :interpreter
	("scala" . scala-mode))

    (use-package sbt-mode
        :ensure t
        :commands sbt-start sbt-command
	:config
	;; WORKAROUND: allows using SPACE when in the minibuffer
	(substitute-key-definition
	    'minibuffer-complete-word
	    'self-insert-command
	    minibuffer-local-completion-map))
    #+END_SRC
** Utilities
*** multi-term
    This package is for creating and managing multiple terminal buffers in Emacs.
    #+BEGIN_SRC emacs-lisp
    (when (require 'multi-term nil t)
        (progn
            ;; custom
	    ;; (customize-set-variable 'multi-term-program "/usr/local/bin/fish")
	    (customize-set-variable 'multi-term-program "bash")
	    ;; focus terminal window after you open dedicated window
	    (customize-set-variable 'multi-term-dedicated-select-after-open-p t)
	    ;; the buffer name of term buffer.
	    (customize-set-variable 'multi-term-buffer-name "multi-term")
	    ;; binds (C-x) prefix
	    (define-key ctl-x-map (kbd "<C-return>") 'multi-term)
	    (define-key ctl-x-map (kbd "x") 'multi-term-dedicated-toggle)))
    #+END_SRC
*** exwm
    EmaX Window Manager [+.-]
    #+BEGIN_SRC emacs-lisp
    ;(use-package exwm :ensure t)
    ;(require 'exwm)
    ;(require 'exwm-config)
    ;(exwm-config-default)
    #+END_SRC
*** bats-mode
#+BEGIN_SRC emacs-lisp
(require 'bats-mode)
#+END_SRC
* FAQ
  - Q: How to install this?
  - A: Don't!

    This is my personal .emacs.d and batteries may or may not be included, depending on what I'm up to at any given moment. If you'd like to experiment though the commands are as follows:

    #+BEGIN_SRC shell
    # pkill -TERM -u "${USER}" emacs 
    # or exit emacs via any other appropriate means.
    # ~/.emacs.d should be moveable/erasable without 
    # lock/save/temp stale artifacts, or git will complain.
    cd 
    mv .emacs.d .emacs.d.bkp.$(date +%s)
    git clone https://github.com/michaeltd/.emacs.d
    emacs
    #+END_SRC

    Whait a bit and watch the message log scroll along while melpa and org work their magic and in a matter of seconds your install will be complete.

    If exwm appears "moody" during install, fire up emacs once more, chances are it's installed and working fine. If not, fire up a ~M-x package-install R exwm R~ or comment out exwm entirely.

    To use exwm you'll need to uncomment the requires/exwm-config-default elisp statements and launch from your DM of choice a /usr/share/xsessions/exwm.desktop file similar to the following:

    #+BEGIN_SRC ini
    [Desktop Entry]
    Name=EmaX Window Manager
    Comment=A Window Manager for the Emacs OS
    TryExec=emacs --daemon -f exwm-enable
    Exec=/usr/bin/emacs --daemon -f exwm-enable
    Type=Application
    #+END_SRC

    Desktop selection shortcut is ~s-w~ and async shell command is ~s-&~. (~s~ as in ~Super~ or ~Win key~, not ~Shift~) All other keyboard shortcuts you'll need are the standard window/buffer emacs shortcuts.

    More on EmaX Window Manager at [[https://github.com/ch11ng/exwm/wiki/EXWM-User-Guide][EXWM wiki]]
* References
  In no particular order:
  + [[https://github.com/technomancy/emacs-starter-kit][emacs-starter-kit]]
  + [[https://github.com/purcell/emacs.d][a reasonable emacs config]]
  + [[https://github.com/bbatsov/prelude][prelude]]
  + [[https://github.com/seagle0128/.emacs.d][Centaur Emacs]]
  + [[https://sanemacs.com][sanemacs]]
  + [[https://pages.sachachua.com/.emacs.d/Sacha.html][sasha chua dot emacs]]
  + [[https://spacemacs.org/][spacemacs]]
  + [[https://github.com/hlissner/doom-emacs][doom-emacs]]
  + [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][Harry R. Schwartz]]
  + [[https://github.com/PythonNut/quark-emacs][quark-emacs]]
